AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Instance for LLM with secure access to SSM Parameter Store, KMS decryption, pulling latest Docker image from ECR, cloning GitHub repo, running Docker Compose, and setting environment variables from SSM Parameter Store based on Ubuntu AMI
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  KmsKeyAlias:
    Description: Alias name of the KMS key used to encrypt/decrypt parameters
    Type: String
    Default: alias/myDefaultKeyAlias
  AmiId:
    Description: AMI ID to use for the EC2 instance
    Type: AWS::EC2::Image::Id

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AccessECRandSSMwithKMS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - kms:Decrypt
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource: "*" 
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-sg
      GroupDescription: Security group for EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: g5.xlarge
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 512
            VolumeType: gp3
      Tags:
        - Key: "Name"
          Value: "LLM Instance"
      SecurityGroups:
        - Ref: SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # sudo apt update && sudo apt install docker-compose -y
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
          sudo chmod +x /usr/bin/docker-compose
          # create environment variables
          echo "export AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/profile
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          HF_TOKEN=$(aws ssm get-parameter --name "/secure-ai/HF_TOKEN" --with-decryption --query "Parameter.Value" --region ${AWS::Region} --output text)
          export HF_TOKEN=$HF_TOKEN
          echo "export HF_TOKEN=$HF_TOKEN" >> /etc/profile
      
          # Fetch and export LLM_ENDPOINT
          LLM_ENDPOINT=$(aws ssm get-parameter --name "/secure-ai/LLM_ENDPOINT" --query "Parameter.Value" --region ${AWS::Region} --output text)
          export LLM_ENDPOINT=$LLM_ENDPOINT
          echo "export LLM_ENDPOINT=$LLM_ENDPOINT" >> /etc/profile
      
          # Fetch and export LLM_MODEL
          LLM_MODEL=$(aws ssm get-parameter --name "/secure-ai/LLM_MODEL" --query "Parameter.Value" --region ${AWS::Region} --output text)
          export LLM_MODEL=$LLM_MODEL
          echo "export LLM_MODEL=$LLM_MODEL" >> /etc/profile
     
      
      
      
          #display current user
          echo $(whoami)
          #display the env variables
          echo $LLM_ENDPOINT
          echo $LLM_MODEL
          echo $HF_TOKEN


          #echo "export HF_TOKEN=$(aws ssm get-parameter --name "/secure-ai/HF_TOKEN" --with-decryption --query "Parameter.Value" --region ${AWS::Region} --output text)" >> /etc/profile
          #echo "export LLM_ENDPOINT=$(aws ssm get-parameter --name "/secure-ai/LLM_ENDPOINT" --query "Parameter.Value" --region ${AWS::Region} --output text)" >> /etc/profile
          # Fetch SSM Parameters and set them as environment variables      
          #echo "export HF_TOKEN=$(aws ssm get-parameter --name "/secure-ai/HF_TOKEN" --with-decryption --query "Parameter.Value" --region ${AWS::Region}  --output text)" >> /etc/profile
          #echo "export LLM_ENDPOINT=$(aws ssm get-parameter --name "/secure-ai/LLM_ENDPOINT" --region ${AWS::Region}  --query "Parameter.Value" --output text)" >> /etc/profile

          # Clone the specified GitHub repository
          cd /home/ubuntu
          git clone https://github.com/jsotiro/run-chat-ui.git
          cd run-chat-ui
          
          # Replace placeholders in Docker Compose template files
          sed -i "s/{{ACCOUNT_ID}}/${AWS::AccountId}/g" assets/docker-compose.yml
          sed -i "s/{{ACCOUNT_ID}}/${AWS::AccountId}/g" assets/docker-compose-remote.yml
          sed -i "s/{{REGION}}/${AWS::Region}/g" assets/docker-compose.yml
          sed -i "s/{{REGION}}/${AWS::Region}/g" assets/docker-compose-remote.yml

          # Authenticate with ECR
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${AWS::Region}.amazonaws.com
          # Check LLM_ENDPOINT value and decide which docker-compose file to use
          if [ "$LLM_ENDPOINT" ==  "http://llm_model:8000/v1" ]; then
            docker-compose -f assets/docker-compose.yml up -d
          else
            docker-compose -f assets/docker-compose-remote.yml up -d
          fi
Outputs:
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
